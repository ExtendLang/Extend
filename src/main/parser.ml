type token =
  | LSQBRACK
  | RSQBRACK
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | HASH
  | COLON
  | COMMA
  | QUESTION
  | GETS
  | ASN
  | SEMI
  | PRECEDES
  | UNDERSCORE
  | SWITCH
  | CASE
  | DEFAULT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | POWER
  | LSHIFT
  | RSHIFT
  | EQ
  | NOTEQ
  | GT
  | LT
  | GTEQ
  | LTEQ
  | LOGNOT
  | LOGAND
  | LOGOR
  | BITNOT
  | BITXOR
  | BITAND
  | BITOR
  | EMPTY
  | RETURN
  | IMPORT
  | GLOBAL
  | LIT_INT of (int)
  | LIT_FLOAT of (float)
  | LIT_STRING of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* LSQBRACK *);
  258 (* RSQBRACK *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* HASH *);
  264 (* COLON *);
  265 (* COMMA *);
  266 (* QUESTION *);
  267 (* GETS *);
  268 (* ASN *);
  269 (* SEMI *);
  270 (* PRECEDES *);
  271 (* UNDERSCORE *);
  272 (* SWITCH *);
  273 (* CASE *);
  274 (* DEFAULT *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* TIMES *);
  278 (* DIVIDE *);
  279 (* MOD *);
  280 (* POWER *);
  281 (* LSHIFT *);
  282 (* RSHIFT *);
  283 (* EQ *);
  284 (* NOTEQ *);
  285 (* GT *);
  286 (* LT *);
  287 (* GTEQ *);
  288 (* LTEQ *);
  289 (* LOGNOT *);
  290 (* LOGAND *);
  291 (* LOGOR *);
  292 (* BITNOT *);
  293 (* BITXOR *);
  294 (* BITAND *);
  295 (* BITOR *);
  296 (* EMPTY *);
  297 (* RETURN *);
  298 (* IMPORT *);
  299 (* GLOBAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  300 (* LIT_INT *);
  301 (* LIT_FLOAT *);
  302 (* LIT_STRING *);
  303 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\005\000\003\000\003\000\006\000\004\000\
\004\000\008\000\008\000\010\000\010\000\013\000\013\000\014\000\
\014\000\011\000\007\000\007\000\017\000\017\000\019\000\019\000\
\015\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\023\000\024\000\027\000\
\027\000\028\000\028\000\029\000\029\000\030\000\030\000\025\000\
\026\000\032\000\032\000\033\000\033\000\031\000\031\000\034\000\
\034\000\020\000\020\000\020\000\021\000\021\000\035\000\035\000\
\035\000\035\000\035\000\035\000\036\000\036\000\036\000\036\000\
\036\000\036\000\037\000\038\000\038\000\009\000\009\000\039\000\
\039\000\040\000\040\000\018\000\018\000\012\000\012\000\041\000\
\041\000\000\000"

let yylen = "\002\000\
\004\000\000\000\002\000\003\000\000\000\002\000\002\000\000\000\
\002\000\008\000\009\000\000\000\001\000\001\000\002\000\001\000\
\001\000\003\000\002\000\003\000\002\000\004\000\000\000\002\000\
\005\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\005\000\007\000\000\000\
\001\000\001\000\002\000\004\000\005\000\001\000\003\000\004\000\
\003\000\001\000\003\000\001\000\003\000\000\000\001\000\001\000\
\003\000\000\000\003\000\005\000\003\000\005\000\000\000\001\000\
\003\000\002\000\002\000\001\000\000\000\001\000\003\000\002\000\
\002\000\001\000\001\000\001\000\003\000\000\000\001\000\001\000\
\003\000\001\000\002\000\003\000\005\000\003\000\005\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\114\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\006\000\004\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\001\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\036\000\037\000\
\038\000\000\000\000\000\028\000\029\000\030\000\031\000\032\000\
\000\000\021\000\000\000\019\000\000\000\113\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\020\000\
\110\000\000\000\106\000\000\000\000\000\000\000\104\000\000\000\
\034\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\107\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\097\000\085\000\000\000\000\000\109\000\000\000\111\000\000\000\
\105\000\000\000\000\000\000\000\101\000\000\000\095\000\000\000\
\000\000\016\000\000\000\000\000\014\000\017\000\000\000\000\000\
\000\000\000\000\066\000\086\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\063\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\091\000\083\000\000\000\000\000\000\000\018\000\
\011\000\000\000\000\000\068\000\000\000\089\000\025\000\069\000\
\084\000"

let yydgoto = "\002\000\
\003\000\004\000\006\000\010\000\007\000\011\000\162\000\021\000\
\092\000\163\000\176\000\022\000\164\000\165\000\166\000\108\000\
\016\000\017\000\042\000\174\000\085\000\036\000\037\000\038\000\
\039\000\040\000\102\000\170\000\171\000\180\000\104\000\053\000\
\054\000\105\000\186\000\109\000\187\000\110\000\094\000\095\000\
\048\000"

let yysindex = "\020\000\
\000\000\000\000\000\000\254\254\038\255\045\255\000\000\091\255\
\026\255\002\000\000\000\000\000\206\255\103\255\000\000\000\255\
\088\255\154\255\141\255\000\000\000\000\109\255\206\255\206\255\
\206\255\155\255\206\255\206\255\206\255\000\000\000\000\000\000\
\000\000\183\255\044\000\000\000\000\000\000\000\000\000\000\000\
\206\255\000\000\120\255\000\000\023\255\000\000\090\001\015\255\
\028\255\189\255\076\000\090\001\035\255\130\255\000\000\206\255\
\171\255\171\255\171\255\206\255\075\255\000\000\206\255\206\255\
\206\255\206\255\206\255\206\255\206\255\206\255\206\255\206\255\
\206\255\206\255\206\255\206\255\206\255\206\255\206\255\206\255\
\206\255\206\255\206\255\206\255\000\000\090\001\103\255\000\000\
\000\000\154\255\000\000\199\255\150\255\198\255\000\000\028\255\
\000\000\000\000\206\255\206\255\090\001\211\255\090\001\213\255\
\201\255\206\255\096\255\090\001\072\255\212\255\115\000\147\000\
\122\001\214\003\214\003\006\255\006\255\006\255\171\255\006\255\
\006\255\126\255\126\255\126\255\126\255\126\255\126\255\186\001\
\154\001\214\003\006\255\214\003\000\000\223\255\222\255\000\000\
\028\255\227\255\130\255\090\001\233\255\000\000\206\255\186\000\
\000\000\000\000\075\255\096\255\000\000\206\255\000\000\032\255\
\000\000\235\255\136\255\090\001\000\000\239\255\000\000\090\001\
\007\255\000\000\202\255\032\255\000\000\000\000\032\255\206\255\
\236\255\017\255\000\000\000\000\188\255\237\255\206\255\241\255\
\000\000\202\255\090\001\169\255\206\255\000\000\000\000\206\255\
\090\001\083\255\240\255\206\255\218\000\000\000\248\255\206\255\
\206\255\250\000\000\000\000\000\188\255\206\255\026\001\000\000\
\000\000\058\001\090\001\000\000\253\255\000\000\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\255\000\000\
\252\255\000\000\000\000\013\255\000\000\092\255\000\000\005\000\
\224\001\006\002\044\002\007\000\100\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\255\081\255\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\252\255\
\000\000\000\000\000\000\000\000\012\000\000\000\040\255\000\000\
\015\000\000\000\108\255\029\255\000\000\116\255\000\000\000\000\
\118\000\092\003\126\003\120\002\158\002\196\002\082\002\234\002\
\016\003\240\003\018\004\052\004\086\004\120\004\154\004\188\004\
\201\004\160\003\054\003\194\003\000\000\000\000\000\000\000\000\
\000\000\000\000\118\255\033\255\000\000\000\000\000\000\000\000\
\000\000\000\000\255\255\124\255\000\000\000\000\000\000\204\255\
\000\000\000\000\000\000\119\255\000\000\000\000\000\000\210\255\
\193\255\000\000\000\000\006\000\000\000\000\000\204\255\000\000\
\000\000\000\000\000\000\000\000\164\255\000\000\000\000\000\000\
\000\000\000\000\221\255\000\000\000\000\000\000\000\000\174\255\
\098\255\000\000\179\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\180\255\000\000\000\000\
\000\000\000\000\228\255\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\254\000\000\000\
\181\000\111\000\129\000\000\000\000\000\132\000\000\000\243\255\
\020\001\232\255\221\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\
\213\000\000\000\116\000\168\000\078\255\153\255\000\000\179\000\
\227\000"

let yytablesize = 1516
let yytable = "\035\000\
\005\000\020\000\008\000\145\000\047\000\195\000\061\000\173\000\
\043\000\051\000\052\000\055\000\044\000\057\000\058\000\059\000\
\089\000\041\000\076\000\206\000\001\000\076\000\182\000\090\000\
\093\000\076\000\013\000\086\000\013\000\071\000\100\000\043\000\
\013\000\168\000\169\000\088\000\100\000\100\000\077\000\005\000\
\098\000\077\000\101\000\080\000\159\000\077\000\103\000\099\000\
\080\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\130\000\131\000\132\000\093\000\
\014\000\146\000\091\000\106\000\047\000\023\000\161\000\024\000\
\147\000\025\000\107\000\008\000\196\000\052\000\140\000\009\000\
\112\000\023\000\026\000\197\000\144\000\023\000\027\000\112\000\
\106\000\074\000\023\000\099\000\024\000\093\000\025\000\012\000\
\074\000\099\000\099\000\028\000\093\000\098\000\029\000\026\000\
\093\000\041\000\030\000\027\000\098\000\094\000\031\000\032\000\
\033\000\034\000\081\000\075\000\094\000\096\000\061\000\081\000\
\028\000\156\000\075\000\029\000\096\000\024\000\014\000\030\000\
\160\000\024\000\100\000\031\000\032\000\033\000\034\000\049\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\168\000\169\000\179\000\050\000\023\000\056\000\024\000\185\000\
\025\000\189\000\082\000\083\000\084\000\087\000\087\000\194\000\
\046\000\026\000\185\000\061\000\087\000\027\000\199\000\092\000\
\192\000\193\000\202\000\203\000\088\000\090\000\092\000\185\000\
\185\000\060\000\028\000\088\000\090\000\029\000\023\000\096\000\
\024\000\030\000\025\000\184\000\136\000\031\000\032\000\033\000\
\034\000\023\000\135\000\026\000\082\000\023\000\137\000\027\000\
\023\000\143\000\024\000\062\000\025\000\062\000\141\000\062\000\
\142\000\062\000\062\000\148\000\028\000\026\000\062\000\029\000\
\151\000\027\000\152\000\030\000\070\000\070\000\154\000\031\000\
\032\000\033\000\034\000\071\000\071\000\155\000\028\000\167\000\
\172\000\029\000\175\000\181\000\012\000\030\000\190\000\198\000\
\188\000\031\000\032\000\033\000\034\000\201\000\209\000\102\000\
\093\000\005\000\018\000\008\000\035\000\035\000\015\000\035\000\
\064\000\035\000\078\000\035\000\035\000\035\000\103\000\065\000\
\035\000\035\000\079\000\087\000\138\000\178\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\045\000\035\000\035\000\177\000\
\035\000\035\000\035\000\005\000\061\000\062\000\013\000\005\000\
\019\000\008\000\191\000\133\000\063\000\064\000\183\000\139\000\
\205\000\065\000\158\000\153\000\134\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\061\000\080\000\081\000\097\000\
\082\000\083\000\084\000\000\000\000\000\064\000\000\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\000\000\080\000\081\000\000\000\
\082\000\083\000\084\000\061\000\149\000\000\000\000\000\033\000\
\000\000\033\000\000\000\033\000\064\000\033\000\033\000\033\000\
\065\000\000\000\033\000\033\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\061\000\080\000\081\000\000\000\082\000\
\083\000\084\000\150\000\000\000\064\000\000\000\000\000\000\000\
\065\000\000\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\000\000\080\000\081\000\000\000\082\000\
\083\000\084\000\061\000\157\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\064\000\000\000\000\000\200\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\064\000\000\000\000\000\204\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\064\000\000\000\000\000\207\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\064\000\000\000\000\000\208\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\064\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\081\000\000\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\061\000\080\000\000\000\000\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\000\000\000\000\082\000\083\000\
\084\000\059\000\000\000\059\000\000\000\059\000\000\000\059\000\
\059\000\059\000\000\000\000\000\059\000\059\000\000\000\000\000\
\000\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\059\000\059\000\000\000\059\000\059\000\059\000\060\000\
\000\000\060\000\000\000\060\000\000\000\060\000\060\000\060\000\
\000\000\000\000\060\000\060\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\060\000\
\060\000\000\000\060\000\060\000\060\000\061\000\000\000\061\000\
\000\000\061\000\000\000\061\000\061\000\061\000\000\000\000\000\
\061\000\061\000\000\000\000\000\000\000\000\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\000\000\061\000\061\000\000\000\
\061\000\061\000\061\000\045\000\000\000\045\000\000\000\045\000\
\000\000\045\000\045\000\045\000\000\000\000\000\045\000\045\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\045\000\045\000\000\000\045\000\045\000\
\045\000\042\000\000\000\042\000\000\000\042\000\000\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\042\000\000\000\042\000\042\000\042\000\043\000\
\000\000\043\000\000\000\043\000\000\000\043\000\043\000\043\000\
\000\000\000\000\043\000\043\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\
\043\000\000\000\043\000\043\000\043\000\044\000\000\000\044\000\
\000\000\044\000\000\000\044\000\044\000\044\000\000\000\000\000\
\044\000\044\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\044\000\044\000\000\000\
\044\000\044\000\044\000\046\000\000\000\046\000\000\000\046\000\
\000\000\046\000\046\000\046\000\000\000\000\000\046\000\046\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\046\000\046\000\000\000\046\000\046\000\
\046\000\047\000\000\000\047\000\000\000\047\000\000\000\047\000\
\047\000\047\000\000\000\000\000\047\000\047\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\047\000\047\000\000\000\047\000\047\000\047\000\051\000\
\000\000\051\000\000\000\051\000\000\000\051\000\051\000\051\000\
\000\000\000\000\051\000\051\000\000\000\000\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\000\000\051\000\
\051\000\000\000\051\000\051\000\051\000\040\000\000\000\040\000\
\000\000\040\000\000\000\040\000\040\000\040\000\000\000\000\000\
\040\000\040\000\000\000\000\000\000\000\000\000\040\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\040\000\041\000\
\040\000\041\000\040\000\041\000\000\000\041\000\041\000\041\000\
\000\000\000\000\041\000\041\000\000\000\000\000\000\000\000\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\041\000\
\041\000\050\000\041\000\050\000\041\000\050\000\000\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\000\000\050\000\050\000\052\000\050\000\052\000\050\000\052\000\
\000\000\052\000\052\000\052\000\000\000\000\000\052\000\052\000\
\000\000\000\000\000\000\000\000\052\000\052\000\061\000\000\000\
\000\000\000\000\000\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\052\000\052\000\000\000\052\000\000\000\
\052\000\000\000\068\000\069\000\070\000\071\000\072\000\073\000\
\000\000\053\000\000\000\053\000\000\000\053\000\000\000\053\000\
\053\000\053\000\000\000\083\000\053\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
\000\000\053\000\053\000\054\000\000\000\054\000\000\000\054\000\
\000\000\054\000\054\000\054\000\000\000\000\000\054\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\054\000\054\000\055\000\000\000\055\000\
\000\000\055\000\000\000\055\000\055\000\055\000\000\000\000\000\
\055\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\055\000\055\000\056\000\
\000\000\056\000\000\000\056\000\000\000\056\000\056\000\056\000\
\000\000\000\000\056\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\056\000\056\000\056\000\056\000\056\000\000\000\056\000\
\056\000\057\000\000\000\057\000\000\000\057\000\000\000\057\000\
\057\000\057\000\000\000\000\000\057\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\057\000\057\000\058\000\000\000\058\000\000\000\058\000\
\000\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\000\000\058\000\058\000\048\000\000\000\048\000\
\000\000\048\000\000\000\048\000\048\000\048\000\000\000\000\000\
\048\000\048\000\049\000\000\000\049\000\000\000\049\000\000\000\
\049\000\049\000\049\000\000\000\000\000\049\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000"

let yycheck = "\013\000\
\000\000\000\000\000\000\107\000\018\000\184\000\001\001\001\001\
\009\001\023\000\024\000\025\000\013\001\027\000\028\000\029\000\
\002\001\011\001\006\001\198\000\001\000\009\001\006\001\009\001\
\049\000\013\001\001\001\041\000\001\001\024\001\002\001\009\001\
\001\001\017\001\018\001\013\001\008\001\009\001\006\001\042\001\
\006\001\009\001\056\000\004\001\148\000\013\001\060\000\013\001\
\009\001\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\096\000\
\047\001\002\001\047\001\001\001\090\000\003\001\047\001\005\001\
\009\001\007\001\008\001\046\001\002\001\099\000\100\000\043\001\
\002\001\009\001\016\001\009\001\106\000\013\001\020\001\009\001\
\001\001\006\001\003\001\002\001\005\001\002\001\007\001\013\001\
\013\001\008\001\009\001\033\001\009\001\002\001\036\001\016\001\
\137\000\011\001\040\001\020\001\009\001\002\001\044\001\045\001\
\046\001\047\001\004\001\006\001\009\001\002\001\001\001\009\001\
\033\001\143\000\013\001\036\001\009\001\009\001\047\001\040\001\
\150\000\013\001\009\001\044\001\045\001\046\001\047\001\003\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\017\001\018\001\168\000\047\001\003\001\003\001\005\001\173\000\
\007\001\175\000\037\001\038\001\039\001\002\001\047\001\181\000\
\015\001\016\001\184\000\001\001\009\001\020\001\188\000\002\001\
\008\001\009\001\192\000\193\000\002\001\002\001\009\001\197\000\
\198\000\003\001\033\001\009\001\009\001\036\001\003\001\003\001\
\005\001\040\001\007\001\008\001\047\001\044\001\045\001\046\001\
\047\001\009\001\004\001\016\001\012\001\013\001\009\001\020\001\
\003\001\009\001\005\001\002\001\007\001\004\001\004\001\006\001\
\004\001\008\001\009\001\008\001\033\001\016\001\013\001\036\001\
\002\001\020\001\005\001\040\001\008\001\009\001\004\001\044\001\
\045\001\046\001\047\001\008\001\009\001\005\001\033\001\005\001\
\002\001\036\001\041\001\008\001\041\001\040\001\006\001\008\001\
\012\001\044\001\045\001\046\001\047\001\006\001\002\001\004\001\
\002\001\001\001\001\001\001\001\001\001\002\001\009\000\004\001\
\004\001\006\001\004\001\008\001\009\001\010\001\004\001\004\001\
\013\001\014\001\004\001\002\001\096\000\167\000\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\017\000\034\001\035\001\164\000\
\037\001\038\001\039\001\043\001\001\001\002\001\041\001\047\001\
\047\001\047\001\178\000\087\000\009\001\010\001\170\000\099\000\
\197\000\014\001\147\000\137\000\090\000\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\001\001\034\001\035\001\004\001\
\037\001\038\001\039\001\255\255\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\035\001\255\255\
\037\001\038\001\039\001\001\001\002\001\255\255\255\255\002\001\
\255\255\004\001\255\255\006\001\010\001\008\001\009\001\010\001\
\014\001\255\255\013\001\014\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\001\001\034\001\035\001\255\255\037\001\
\038\001\039\001\008\001\255\255\010\001\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\034\001\035\001\255\255\037\001\
\038\001\039\001\001\001\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\035\001\255\255\037\001\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\034\001\255\255\255\255\037\001\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\002\001\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\035\001\255\255\037\001\038\001\039\001\002\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\035\001\255\255\037\001\038\001\039\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\035\001\255\255\
\037\001\038\001\039\001\002\001\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\035\001\255\255\037\001\038\001\
\039\001\002\001\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\035\001\255\255\037\001\038\001\039\001\002\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\035\001\255\255\037\001\038\001\039\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\035\001\255\255\
\037\001\038\001\039\001\002\001\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\035\001\255\255\037\001\038\001\
\039\001\002\001\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\035\001\255\255\037\001\038\001\039\001\002\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\035\001\255\255\037\001\038\001\039\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\035\001\002\001\
\037\001\004\001\039\001\006\001\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\035\001\002\001\037\001\004\001\039\001\006\001\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\035\001\002\001\037\001\004\001\039\001\006\001\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\019\001\020\001\001\001\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\035\001\255\255\037\001\255\255\
\039\001\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\002\001\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\038\001\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\035\001\002\001\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\035\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\034\001\035\001\002\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\034\001\
\035\001\002\001\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\034\001\035\001\002\001\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\034\001\035\001\002\001\255\255\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\002\001\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001"

let yynames_const = "\
  LSQBRACK\000\
  RSQBRACK\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  HASH\000\
  COLON\000\
  COMMA\000\
  QUESTION\000\
  GETS\000\
  ASN\000\
  SEMI\000\
  PRECEDES\000\
  UNDERSCORE\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  POWER\000\
  LSHIFT\000\
  RSHIFT\000\
  EQ\000\
  NOTEQ\000\
  GT\000\
  LT\000\
  GTEQ\000\
  LTEQ\000\
  LOGNOT\000\
  LOGAND\000\
  LOGOR\000\
  BITNOT\000\
  BITXOR\000\
  BITAND\000\
  BITOR\000\
  EMPTY\000\
  RETURN\000\
  IMPORT\000\
  GLOBAL\000\
  EOF\000\
  "

let yynames_block = "\
  LIT_INT\000\
  LIT_FLOAT\000\
  LIT_STRING\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'imports) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'globals) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'func_decls) in
    Obj.repr(
# 38 "parser.mly"
                                   ( (List.rev _1, List.rev _2, List.rev _3) )
# 696 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                  ([])
# 702 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'imports) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'import) in
    Obj.repr(
# 42 "parser.mly"
                   (_2 :: _1)
# 710 "parser.ml"
               : 'imports))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 45 "parser.mly"
                           (_2)
# 717 "parser.ml"
               : 'import))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                  ([])
# 723 "parser.ml"
               : 'globals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'globals) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global) in
    Obj.repr(
# 49 "parser.mly"
                   (_2 :: _1)
# 731 "parser.ml"
               : 'globals))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vardecl) in
    Obj.repr(
# 52 "parser.mly"
                   (_2)
# 738 "parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                  ([])
# 744 "parser.ml"
               : 'func_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 56 "parser.mly"
                         (_2 :: _1)
# 752 "parser.ml"
               : 'func_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'func_param_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'opt_stmt_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'ret_stmt) in
    Obj.repr(
# 60 "parser.mly"
    ( {
      name = _1;
      params = _3;
      body = _6;
      ret_val = ((None, None), _7)
    } )
# 767 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'ret_dim) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'func_param_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'opt_stmt_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'ret_stmt) in
    Obj.repr(
# 67 "parser.mly"
    ( {
      name = _2;
      params = _4;
      body = _7;
      ret_val = (_1, _8);
    } )
# 783 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                  ( [] )
# 789 "parser.ml"
               : 'opt_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
              ( List.rev _1 )
# 796 "parser.ml"
               : 'opt_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
         ( [_1] )
# 803 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                   ( _2 :: _1 )
# 811 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardecl) in
    Obj.repr(
# 83 "parser.mly"
            ( _1 )
# 818 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assign) in
    Obj.repr(
# 83 "parser.mly"
                             ( _1 )
# 825 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                     (_2)
# 832 "parser.ml"
               : 'ret_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_list) in
    Obj.repr(
# 89 "parser.mly"
                  ( Vardecl((None, None), List.rev _1) )
# 839 "parser.ml"
               : 'vardecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dim) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var_list) in
    Obj.repr(
# 90 "parser.mly"
                      ( Vardecl(_1, List.rev _2) )
# 847 "parser.ml"
               : 'vardecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'varassign) in
    Obj.repr(
# 93 "parser.mly"
                 ( [ (_1, _2)] )
# 855 "parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'varassign) in
    Obj.repr(
# 94 "parser.mly"
                                ( (_3, _4) :: _1)
# 864 "parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                  ( None )
# 870 "parser.ml"
               : 'varassign))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
              ( Some _2 )
# 877 "parser.ml"
               : 'varassign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lhs_sel) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                             ( Assign(_1, _2, Some _4) )
# 886 "parser.ml"
               : 'assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rhs_sel) in
    Obj.repr(
# 104 "parser.mly"
                        ( Selection(_1, _2) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                        ( Selection(_2, (None, None)) )
# 901 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'op_expr) in
    Obj.repr(
# 106 "parser.mly"
                        ( _1 )
# 908 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ternary_expr) in
    Obj.repr(
# 107 "parser.mly"
                        ( _1 )
# 915 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'switch_expr) in
    Obj.repr(
# 108 "parser.mly"
                        ( _1 )
# 922 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_expr) in
    Obj.repr(
# 109 "parser.mly"
                        ( _1 )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range_expr) in
    Obj.repr(
# 110 "parser.mly"
                        ( _1 )
# 936 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                        ( Precedence(_1, _3) )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                        ( _2 )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                        ( Id(_1) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 114 "parser.mly"
                        ( LitInt(_1) )
# 965 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 115 "parser.mly"
                        ( LitFlt(_1) )
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parser.mly"
                        ( LitString(_1) )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                        ( Empty )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                        ( BinOp(_1, Plus, _3) )
# 993 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                        ( BinOp(_1, Minus, _3) )
# 1001 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                        ( BinOp(_1, Times, _3) )
# 1009 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                        ( BinOp(_1, Divide, _3) )
# 1017 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                        ( BinOp(_1, Mod, _3) )
# 1025 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                        ( BinOp(_1, Pow, _3) )
# 1033 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                        ( BinOp(_1, LShift, _3) )
# 1041 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                        ( BinOp(_1, RShift, _3) )
# 1049 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                        ( BinOp(_1, LogAnd, _3) )
# 1057 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                        ( BinOp(_1, LogOr, _3) )
# 1065 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                        ( BinOp(_1, BitXor, _3) )
# 1073 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                        ( BinOp(_1, BitAnd, _3) )
# 1081 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                        ( BinOp(_1, BitOr, _3) )
# 1089 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                        ( BinOp(_1, Eq, _3) )
# 1097 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                        ( BinOp(_1, NotEq, _3) )
# 1105 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                        ( BinOp(_1, Gt, _3) )
# 1113 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                        ( BinOp(_1, Lt, _3) )
# 1121 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                        ( BinOp(_1, GtEq, _3) )
# 1129 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                        ( BinOp(_1, LtEq, _3) )
# 1137 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                          ( UnOp(Neg, _2) )
# 1144 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                          ( UnOp(LogNot, _2) )
# 1151 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                          ( UnOp(BitNot, _2) )
# 1158 "parser.ml"
               : 'op_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                                                 ( Ternary(_1, _3, _5) )
# 1167 "parser.ml"
               : 'ternary_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'switch_cond) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    Obj.repr(
# 148 "parser.mly"
                                                             ( Switch(_3, List.rev _6) )
# 1175 "parser.ml"
               : 'switch_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                  ( None )
# 1181 "parser.ml"
               : 'switch_cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
         ( Some _1 )
# 1188 "parser.ml"
               : 'switch_cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_stmt) in
    Obj.repr(
# 155 "parser.mly"
              ( [_1] )
# 1195 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'case_stmt) in
    Obj.repr(
# 156 "parser.mly"
                        ( _2 :: _1 )
# 1203 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                            ( (None, _3) )
# 1210 "parser.ml"
               : 'case_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'case_expr_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                                        ( (Some (List.rev _2), _4) )
# 1218 "parser.ml"
               : 'case_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
         ( [_1] )
# 1225 "parser.ml"
               : 'case_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'case_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                              ( _3 :: _1 )
# 1233 "parser.ml"
               : 'case_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_arg_list) in
    Obj.repr(
# 167 "parser.mly"
                                  ( Call(_1, _3) )
# 1241 "parser.ml"
               : 'func_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'row_list) in
    Obj.repr(
# 170 "parser.mly"
                           ( LitRange(List.rev _2) )
# 1248 "parser.ml"
               : 'range_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'col_list) in
    Obj.repr(
# 173 "parser.mly"
             ([List.rev _1])
# 1255 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'row_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'col_list) in
    Obj.repr(
# 174 "parser.mly"
                           (_3 :: _1)
# 1263 "parser.ml"
               : 'row_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
         ([_1])
# 1270 "parser.ml"
               : 'col_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'col_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                        (_3 :: _1)
# 1278 "parser.ml"
               : 'col_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
                  ([])
# 1284 "parser.ml"
               : 'opt_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_list) in
    Obj.repr(
# 182 "parser.mly"
             ( List.rev _1 )
# 1291 "parser.ml"
               : 'opt_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
         ([_1])
# 1298 "parser.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                        (_3 :: _1)
# 1306 "parser.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "parser.mly"
                                          ( (None, None) )
# 1312 "parser.ml"
               : 'lhs_sel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lslice) in
    Obj.repr(
# 190 "parser.mly"
                                          ( (Some _2, None) )
# 1319 "parser.ml"
               : 'lhs_sel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'lslice) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'lslice) in
    Obj.repr(
# 191 "parser.mly"
                                          ( (Some _2, Some _4) )
# 1327 "parser.ml"
               : 'lhs_sel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rslice) in
    Obj.repr(
# 194 "parser.mly"
                                          ( (Some _2, None) )
# 1334 "parser.ml"
               : 'rhs_sel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'rslice) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rslice) in
    Obj.repr(
# 195 "parser.mly"
                                          ( (Some _2, Some _4) )
# 1342 "parser.ml"
               : 'rhs_sel))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "parser.mly"
                                          ( (None, None) )
# 1348 "parser.ml"
               : 'lslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lslice_val) in
    Obj.repr(
# 199 "parser.mly"
                                          ( (Some _1, None) )
# 1355 "parser.ml"
               : 'lslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lslice_val) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lslice_val) in
    Obj.repr(
# 200 "parser.mly"
                                          ( (Some _1, Some _3) )
# 1363 "parser.ml"
               : 'lslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lslice_val) in
    Obj.repr(
# 201 "parser.mly"
                                          ( (Some _1, Some DimensionEnd) )
# 1370 "parser.ml"
               : 'lslice))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lslice_val) in
    Obj.repr(
# 202 "parser.mly"
                                          ( (Some DimensionStart, Some _2) )
# 1377 "parser.ml"
               : 'lslice))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "parser.mly"
                                          ( (Some DimensionStart, Some DimensionEnd) )
# 1383 "parser.ml"
               : 'lslice))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
                                          ( (None, None) )
# 1389 "parser.ml"
               : 'rslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rslice_val) in
    Obj.repr(
# 207 "parser.mly"
                                          ( (Some _1, None) )
# 1396 "parser.ml"
               : 'rslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rslice_val) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rslice_val) in
    Obj.repr(
# 208 "parser.mly"
                                          ( (Some _1, Some _3) )
# 1404 "parser.ml"
               : 'rslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rslice_val) in
    Obj.repr(
# 209 "parser.mly"
                                          ( (Some _1, Some DimensionEnd) )
# 1411 "parser.ml"
               : 'rslice))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rslice_val) in
    Obj.repr(
# 210 "parser.mly"
                                          ( (Some DimensionStart, Some _2) )
# 1418 "parser.ml"
               : 'rslice))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "parser.mly"
                                          ( (Some DimensionStart, Some DimensionEnd) )
# 1424 "parser.ml"
               : 'rslice))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 214 "parser.mly"
         ( Abs(_1) )
# 1431 "parser.ml"
               : 'lslice_val))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 217 "parser.mly"
         ( Abs(_1) )
# 1438 "parser.ml"
               : 'rslice_val))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
                           ( Rel(_2) )
# 1445 "parser.ml"
               : 'rslice_val))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
                  ( [] )
# 1451 "parser.ml"
               : 'func_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_param_int_list) in
    Obj.repr(
# 222 "parser.mly"
                        ( List.rev _1 )
# 1458 "parser.ml"
               : 'func_param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_sin_param) in
    Obj.repr(
# 225 "parser.mly"
                   ( [_1] )
# 1465 "parser.ml"
               : 'func_param_int_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'func_param_int_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_sin_param) in
    Obj.repr(
# 226 "parser.mly"
                                             ( _3 :: _1 )
# 1473 "parser.ml"
               : 'func_param_int_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 229 "parser.mly"
       ( ((None, None), _1) )
# 1480 "parser.ml"
               : 'func_sin_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dim) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 230 "parser.mly"
           ( (_1, _2) )
# 1488 "parser.ml"
               : 'func_sin_param))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 233 "parser.mly"
                           ( (Some _2, None) )
# 1495 "parser.ml"
               : 'dim))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 234 "parser.mly"
                                      ( (Some _2, Some _4) )
# 1503 "parser.ml"
               : 'dim))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ret_sin) in
    Obj.repr(
# 237 "parser.mly"
                              ( (_2, None) )
# 1510 "parser.ml"
               : 'ret_dim))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ret_sin) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ret_sin) in
    Obj.repr(
# 238 "parser.mly"
                                            ( (_2,_4) )
# 1518 "parser.ml"
               : 'ret_dim))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parser.mly"
         ( Some _1 )
# 1525 "parser.ml"
               : 'ret_sin))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "parser.mly"
               ( Some Wild )
# 1531 "parser.ml"
               : 'ret_sin))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
