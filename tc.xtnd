mergesort(col,data) {
  breakpoint := floor(size(data)[0]/2);
	split1 := data[:breakpoint];
	split2 := data[breakpoint:];
	sizesplit1 := size(split1)[0];
	sizesplit2 := size(split2)[0];
	sortedsplit1 := sizesplit1 < 2 ? split1 : mergesort(col,split1);
	sortedsplit2 := sizesplit2 < 2 ? split2 : mergesort(col,split2);
	[sizesplit1 + sizesplit2, 3] merged;
	merged[0,0] = #isbigger ? sortedsplit1[0] : sortedsplit2[0];
	merged[0,1] = #isbigger ? 1 : 0;
	merged[0,2] = #isbigger ? 0 : 1;
	[sizesplit1 + sizesplit2, 1]isbigger;
	isbigger[0,0] = sortedsplit1[0] <= sortedsplit2[0];
	isbigger[1:,0] = sortedsplit1[merged[[-1], 1]] == empty ? 0 : (sortedsplit2[merged[[-1],2]] == empty ? 1 : (sortedsplit1[merged[[-1],1]] <= sortedsplit2[merged[[-1],2]]));
	merged[1:,0] =
		#isbigger
		? sortedsplit1[merged[[-1],1]]
		: sortedsplit2[merged[[-1],2]];
	merged[1:,1] = #isbigger ? merged[[-1],1] + 1 : merged[[-1],1];
	merged[1:,2] = #isbigger ? merged[[-1],2] : merged[[-1],2] + 1;
  return print_endline("Breakpoint: " + toString(breakpoint)) -> print_endline("Split 1: " + toString(split1)) ->
		print_endline("Split 2: " + toString(split2)) -> print_endline("Sorted 1: " + toString(sortedsplit1)) ->
		print_endline("Sorted 2: " + toString(sortedsplit2)) -> print_endline("Bigger: " + toString(isbigger)) ->
		print_endline("Merged: " + toString(merged)) -> merged[:,0];
}

main(args) {
  mydata := {2;1;235;4;3;234;5;56};
	return print_endline(mergesort(0,mydata));
}
