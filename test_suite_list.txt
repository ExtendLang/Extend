List of Tests
- using imports: multiple imports of the same file ignored
- using imports: referencing globals between imports
- using imports: calling functions from outside imports
- declaring and using global variables
- references between global variables
- declaring and printing numbers
- declaring and printing strings
- declaring the empty type
- declaring and printing a range in one dimension
- declaring and printing a range in multiple dimensions
- declaring and printing a range of strings

Operation Tests(with numbers and with empty, so 2 tests each)(DONE)
- return the value of a bitwise NOT expression
- return the value of a unary negation expression
- return the value of a power exponent expression
- return the value of a multiplication expression
- return the value of a division expression
- return the value of a modulo expression
- return the value of a modulo expression
- return the value of a bitwise left shift expression
- return the value of a bitwise right shift expression
- return the value of a bitwise AND expression
- return the value of an addition expression
- return the value of a subraction expression
- return the value of a bitwise OR expression
- return the value of a bitwise XOR expressiom
- return the value of a logical NOT expression
- return the value of a boolean equals expression
- return the value of a boolean not equals expression
- return the value of a < expression
- return the value of a > expression
- return the value of a <= expression
- return the value of a >= expression
- return the value of a logical && expression
- return the value of a logical || expression
- return the value of a simple ternary conditional expression

- return the value of a simple switch case

- declare a range with dimensions assigned to variables
- declare a 1x1 range without dimensions
- declare formula assignments corresponding to all examples in LRM Section 5.3
- combine a variable declaration with a formula assignment

Range/Function/Expression Tests
- declare a basic function that returns 0 upon call
- Access a cell in a range via [x:y]
- Access the range of cells via [x:]
- Access the range of cells via [:y]
- Access the relative range of cells via [:,[y]]
- Access the cell via [x,] - more than one column
- Access the cell via [x,] - one column
- Access the selected range via [x:, y:]
- Access the selected range via [x:a, y:z]
- Access the cell of a single dimensional range via the # operator
- Access the cell of a multidimensional range via the # operator
- declare a function with a parameter its parameter
- declare a function and omit the [1,1] in the function signature
- declare a function with a variably sized return range that will be assigned at runtime

Range Application
- declare a function that applies cellwise addition/subtraction(see 5.6)
- declare a function that is applied on the whole range

- Illustrate the precedence expression with print
- Illustrate the precedence expression with File I/O functions(see LRM section)

Dependency Application
- illustrate function dependency with one or more functions that use each other

Built-in
- demonstrate the usage of the size function
- demonstrate the usage of the row function
- demonstrate the usage of the column function
- demonstrate the usage of the toString function
- demonstrate the usage of the fromString function

File I/O
TBD


