import "./samples/stdlib.xtnd";

main([1,n] args) {
/*  seqFP := open(args[0]);
  seq1 := readline(seqFP)[:-2]; // discard newline
  seq2 := seq1 -> readline(seqFP)[:-2]; */

  [10,1] seq1;
  [10,1] seq2;
  seq1[0,0] = "A";
  seq1[1,0] = "A";
  seq1[2,0] = "B";
  seq1[3,0] = "B";
  seq1[4,0] = "C";
  seq1[5,0] = "C";
  seq1[6,0] = "D";
  seq1[7,0] = "D";
  seq1[8,0] = "E";
  seq1[9,0] = "E";
  seq2[0,0] = "A";
  seq2[1,0] = "A";
  seq2[2,0] = "B";
  seq2[3,0] = "C";
  seq2[4,0] = "C";
  seq2[5,0] = "D";
  seq2[6,0] = "D";
  seq2[7,0] = "E";
  seq2[8,0] = "E";
  seq2[9,0] = "F";
  alignment := computeSequenceAlignment(seq1, seq2, 1, -1, -3);
/*  output := write(alignment[:,0], STDOUT) ->
            write(alignment[:,1], STDOUT) ->
            close(seqFP); */
  return
    printf(1, toString(alignment[:,0]) + "\n") ->
    printf(1, toString(alignment[:,1]) + "\n") ->
    0;
}

[_,2] computeSequenceAlignment([m,1] seq1, [n,1] seq2,
  matchReward, mismatchPenalty, gapPenalty) {

  [m, n] scoreFromMatch, scoreFromLeft, scoreFromTop;
  [m, n] path, step;
  seq2T := transpose(seq2);
  [m+1,n+1] score;

  score[0, 0] = 0;
  score[1:,0] = score[[-1],] + gapPenalty;
  score[0,1:] = score[,[-1]] + gapPenalty;
  score[1:,1:] = nmax(scoreFromMatch[[-1],[-1]],
      nmax(scoreFromLeft[[-1],[-1]], scoreFromTop[[-1],[-1]]));

  scoreFromMatch = #score + ((#seq1 == #seq2T) ? matchReward : mismatchPenalty);
  scoreFromLeft = score[[1],] + gapPenalty;
  scoreFromTop = score[,[1]] + gapPenalty;

  step = (#scoreFromMatch >= #scoreFromLeft) ?
      ((#scoreFromMatch >= #scoreFromTop) ? "D" : "T") :
      ((#scoreFromLeft  >= #scoreFromTop) ? "L" : "T");

  path[-1,-1] = 1;
  path[-1,:-1] = (step[,[1]] == "L" && isNumber(path[,[1]])) ? 1 + path[,[1]] : empty;
  path[:-1,-1] = (step[[1],] == "T" && isNumber(path[[1],])) ? 1 + path[[1],] : empty;
  path[:-1,:-1] = switch {
    case step[[1],[1]] == "D" && isNumber(path[[1],[1]]):
      1 + path[[1],[1]];
    case step[,[1]] == "L" && isNumber(path[,[1]]):
      1 + path[,[1]];
    case step[[1],] == "T" && isNumber(path[[1],]):
      1 + path[[1],];
  };

  pathLen := path[0,0];
  [m, 1] seq1Positions := pathLen - max(path[,:]);
  [1, n] seq2PositionsT := pathLen - max(path[:,]);
  seq2Positions := transpose(seq2PositionsT);
  [pathLen, 1] seq1Loc := match(seq1Positions, row());
  [pathLen, 1] seq2Loc := match(seq2Positions, row());

  [pathLen, 2] results;
  results[:,0] = seq1[#seq1Loc];
  results[:,1] = seq2[#seq2Loc];

  return
    printf(1, "seq1:\n" + toString(seq1) + "\n\n") ->
    printf(1, "seq2:\n" + toString(seq2) + "\n\n") ->
    printf(1, "seq2T:\n" + toString(seq2T) + "\n\n") ->
    printf(1, "scoreFromMatch:\n" + toString(scoreFromMatch) + "\n\n") ->
    printf(1, "scoreFromLeft:\n" + toString(scoreFromLeft) + "\n\n") ->
    printf(1, "scoreFromTop:\n" + toString(scoreFromTop) + "\n\n") ->
    printf(1, "score:\n" + toString(score) + "\n\n") ->
    printf(1, "step:\n" + toString(step) + "\n\n") ->
    printf(1, "path:\n" + toString(path) + "\n\n") ->
    printf(1, "pathLen:\n" + toString(pathLen) + "\n\n") ->
    printf(1, "seq1Positions:\n" + toString(seq1Positions) + "\n\n") ->
    printf(1, "seq2Positions:\n" + toString(seq2Positions) + "\n\n") ->
    printf(1, "seq1Loc:\n" + toString(seq1Loc) + "\n\n") ->
    printf(1, "seq2Loc:\n" + toString(seq2Loc) + "\n\n") ->


    results;
}
