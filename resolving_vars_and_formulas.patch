diff --git a/src/stdlib/lib.c b/src/stdlib/lib.c
index cc3bed8..eb7e032 100644
--- a/src/stdlib/lib.c
+++ b/src/stdlib/lib.c
@@ -306,6 +306,12 @@ struct ExtendFormula {
 
   FormulaFP formula;
 };
+
+struct ResolvedFormula {
+	int rowStart, rowEnd, colStart, colEnd;
+	FormulaFP formula;
+};
+
 struct var_defn {
   /* This is like a class definition - for every declared variable in the
    * Extend source, there should be one instance of these per compiled program.
@@ -321,10 +327,10 @@ struct var_instance {
   /* This is an actual instance of a variable - we get one of these
    * per variable per time a function is called (assuming the contents
    * of the variable get examined.  */
-  struct var_defn defi;
+	int rows, cols;
+	struct ResolvedFormula *formulas;
   struct ExtendScope *closure;
-  char *status;
-  struct value_t *values;
+  struct value_p *values;
 };
 struct ExtendScope {
   struct var_defn *defns;
@@ -333,6 +339,26 @@ struct ExtendScope {
 };
 struct ExtendScope *global_scope;
 
+struct var_instance instantiate_variable(struct ExtendScope *scope_ptr, struct var_defn def) {
+	rows_var = get_variable(scope_ptr, def.rows_varnum);
+	rows = get_val(rows_var,0,0);
+	cols_var = get_variable(scope_ptr, def.cols_varnum);
+	rows = get_val(rows_var,0,0);
+	// TODO: do the same thing for each FormulaFP to turn an ExtendFormula into a ResolvedFormula
+}
+
+struct var_instance get_variable(struct ExtendScope *scope_ptr, int varnum) {
+	if (varnum >= numVars) {
+		fprintf(stderr, "Asked for nonexistant variable number\n")
+		exit(-1);
+	}
+	if (scope_ptr->var_instance[varnum] == NULL) {
+		scope_ptr->vars[varnum] = instantiate_variable(scope_ptr, scope_ptr->defns[varnum]);
+		// Something like that, anyway
+	}
+	return scope_ptr->vars[varnum];
+}
+
 bool assertInBounds(struct var_defn *defn, int x, int y) {
 	if(defn->rows_varnum < x && defn->cols_varnum < y) return true;
 	return false;
@@ -351,7 +377,9 @@ int calcVal(struct var_instance *inst, int x, int y, value_p target) {
 	struct ExtendFormula *form = inst->defi.formulas;
 	while(form < inst->defi.formulas + inst->defi.numFormulas) {
 		if(fitsRange(form, x, y)) {
+			//// WHAT?!?!?!?!??!!
 			goto found;
+			//// nooooooooooooooooooooooo
 		}
 		form++;
 	}
