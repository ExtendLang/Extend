/* jss2272 ns3158 */

global rounding_cutoff := 1e-7;
global digits_after_decimal := 6;

extern "stdlib.a" {
  sin(val);
  cos(val);
  tan(val);
  acos(val);
  asin(val);
  atan(val);
  sinh(val);
  cosh(val);
  tanh(val);
  exp(val);
  log(val);
  log10(val);
  sqrt(val);
  ceil(val);
  fabs(val);
  floor(val);
  isNaN(val);
  len(str);
  round(val, number_of_digits);
  isInfinite(val);
  get_stdin();
  get_stdout();
  get_stderr();
  open(filename, mode);
  close(file_handle);
  read(file_handle, num_bytes);
  readline(file_handle);
  write(file_handle, buffer);
  toASCII(val);
  fromASCII(val);
  plot(val);
  bar_chart(file_handle, labels, vals);
  line_chart(file_handle, labels, x_vals);
  parseFloat(val);
}

global STDIN := get_stdin();
global STDOUT := get_stdout();
global STDERR := get_stderr();

print_endline(val) {
  return write(STDOUT, toString(val) + "\n");
}

transpose([m,n] rng) {
  [n,m] ret := rng[column(),row()];
  return ret;
}

flatten([m,n] rng) {
  [1,m*n] ret := rng[floor(column()/n), column()%n];
  return ret;
}

isNumber(x) {
  return typeof(x) == "Number";
}

isEmpty(x) {
  return typeof(x) == "Empty";
}

colRange(start, end) {
  [end-start, 1] ret;
  ret[0,0] = start;
  ret[1:,0] = ret[[-1]] + 1;
  return ret;
}

rowRange(start, end) {
  return transpose(colRange(start,end));
}

matchCol([num_rows, 1] list, val) {
  [num_rows, 1] amt_to_add, final_index;
  amt_to_add[0,0] = val == #list ? 0 : 1;
  amt_to_add[1:,0] = (amt_to_add[[-1]] == 0 || val == #list) ? 0 : 1;
  final_index[0,0] = 0;
  final_index[1:,0] = final_index[[-1]] + amt_to_add[[-1]];
  return amt_to_add[-1] == 0 ? final_index[-1] : empty;
}

matchRow([1, num_cols] list, val) {
  [1, num_cols] amt_to_add, final_index;
  amt_to_add[0,0] = val == #list ? 0 : 1;
  amt_to_add[0,1:] = (amt_to_add[[-1]] == 0 || val == #list) ? 0 : 1;
  final_index[0,0] = 0;
  final_index[0,1:] = final_index[[-1]] + amt_to_add[[-1]];
  return amt_to_add[-1] == 0 ? final_index[-1] : empty;
}

match([m,n] list, val) {
  return m == 1 ? matchRow(list, val) : (n == 1 ? matchCol(list, val) : empty);
}

bsearch([num_rows, 1] list, val) {
  mid := (num_rows - 1) / 2;
  return switch {
    case list[mid] == val:
      mid;
    case list[mid] > val:
      mid > 0 ? bsearch(list[:mid], val) : empty;
    case list[mid] < val:
      num_rows > 1 ? mid + 1 + bsearch(list[mid+1:], val) : empty;
  };
}

sum_column([m,1] rng) {
  [m,1] running_sum;
  running_sum[0,0] = #rng;
  running_sum[1:,0] = running_sum[[-1]] + #rng;
  return running_sum[-1];
}

sum([m,n] rng) {
  /* Returns the sum of the values in the range, skipping any values that are non-numeric */
  [m,n] numbers := isNumber(#rng) ? #rng : 0;
  [1,n] column_sums := sum_column(numbers[:,]);
  return sum_column(transpose(column_sums));
}

nmax(n1, n2) {
  return n1 > n2 ? n1 : n2;
}

max_column([m,1] rng) {
  [m,1] running_max;
  running_max[0,0] = #rng;
  running_max[1:,0] = running_max[[-1]] > #rng ? running_max[[-1]] : #rng;
  return running_max[-1];
}

max([m,n] rng) {
  /* Returns the max of the values in the range, skipping any values that are non-numeric */
  [m,n] numbers := isNumber(#rng) ? #rng : empty;
  [1,n] column_maxs := max_column(rng[:,]);
  return max_column(transpose(column_maxs));
}

nmin(n1, n2) {
  return n1 < n2 ? n1 : n2;
}

min_column([m,1] rng) {
  [m,1] running_min;
  running_min[0,0] = #rng;
  running_min[1:,0] = running_min[[-1]] > #rng ? running_min[[-1]] : #rng;
  return running_min[-1];
}

min([m,n] rng) {
  /* Returns the min of the values in the range, skipping any values that are non-numeric */
  [m,n] numbers := isNumber(#rng) ? #rng : empty;
  [1,n] column_mins := min_column(rng[:,]);
  return min_column(transpose(column_mins));
}

sign(arg) {
  return switch {
    case arg > 0: 1;
    case arg < 0: -1;
    case arg == 0: 0;
  };
}

gcd(m, n) {
  return (n == 0) ? m : gcd(n, m % n);
}

lcm(m, n) {
  return m * n / gcd(m, n);
}

sumsq([m,n] rng) {
  [m,n] squares := #rng * #rng;
  return sum(squares);
}

sumproduct([m,n] rng1, [m,n] rng2) {
  [m,n] products := #rng1 * #rng2;
  return sum(products);
}

sumxmy2([m,n] rng1, [m,n] rng2) {
  [m,n] diffs := #rng1 - #rng2;
  return sumsq(diffs);
}

mmult([m,n] rng1, [n,p] rng2) {
  [m,p] result := sumproduct(rng1[,:],transpose(rng2[:,]));
  return result;
}

linest([p,q] known_ys, [p,q] known_xs) {
  flat_ys := flatten(known_ys);
  flat_xs := flatten(known_xs);

  n := p * q;
  S_x := sum(flat_xs);
  S_y := sum(flat_ys);
  S_xx := sumsq(flat_xs);
  S_yy := sumsq(flat_ys);
  S_xy := sumproduct(flat_xs, flat_ys);

  beta1_hat := (n * S_xy - S_x*S_y)/(n*S_xx - S_x*S_x);
  beta0_hat := S_y / n - beta1_hat * S_x / n;
  [2,2] ret;
  ret[0,0] = "Intercept estimate";
  ret[0,1] = "Slope estimate";
  ret[1,0] = beta0_hat;
  ret[1,1] = beta1_hat;
  return ret;
}

toUpper(text) {
  val := toASCII(text);
  val_s := size(val);
  [val_s[0],val_s[1]] result := #val >= 97 && #val <= 122 ? #val - 32 : #val;
  return fromASCII(result);
}

toLower(text) {
  val := toASCII(text);
  val_s := size(val);
  [val_s[0],val_s[1]] result := #val >= 65 && #val <= 90 ? #val + 32 : #val;
  return fromASCII(result);
}

left(str, num_chars) {
  return fromASCII(toASCII(str)[:num_chars]);
}

right(str, num_chars) {
  return fromASCII(toASCII(str)[-num_chars:]);
}

substring(str, start, length) {
  return fromASCII(toASCII(str)[start:start+length]);
}

concatRow([1,n] cells, joiner) {
  [1,n] accum, strings := toString(#cells);
  accum[0,0] = #strings;
  accum[0,1:] = accum[[-1]] + joiner + #strings;
  return accum[-1];
}

concatCol([m,1] cells, joiner) {
  return transpose(concatRow(transpose(cells), joiner));
}

join([m,n] cells, joiner) {
  return m == 1 ? concatRow(cells, joiner) : (n == 1 ? concatCol(cells, joiner) : empty);
}

joinRange([m,n] cells, rowJoiner, colJoiner) {
  [m,n] strings := toString(#cells);
  [m,1] joinedRows := concatRow(strings[,:], colJoiner);
  return concatCol(joinedRows, rowJoiner);
}

toRangeLiteral([m,n] rng) {
  [m,n] strings := toLiteral(#rng);
  [m,1] rows := concatRow(strings[,:], ", ");
  return "{" + concatRow(transpose(rows), ";\n") + "}";
}

toLiteral(arg) {
  return switch(typeof(arg)) {
    case "Number":
      toString(arg);
    case "String":
      "\"" + arg + "\"";
    case "Empty":
      "empty";
    case "Range":
      toRangeLiteral(arg);
  };
}

repeat(str, num) {
  [1,num] copies := str;
  return concatRow(copies,"");
}

stringOfPositiveInteger(arg) {
  num_digits := 1 + floor(log10(arg));
  [1,num_digits] digits := floor(arg/10**(num_digits-1-column())) % 10;
  [1,num_digits] ascii_digits := 48 + #digits;
  return arg < 1 ? "0" : fromASCII(ascii_digits);
}

padLeft(str, pad_char, total_length) {
  existing_length := len(str);
  padding := repeat(pad_char, total_length - len(str));
  return existing_length < total_length ? (padding + str) : str;
}

toString(arg) {
  positive_arg := fabs(arg);
  closest_integer := round(positive_arg, 0);
  is_integral_enough := fabs(positive_arg-closest_integer) < rounding_cutoff;
  floating_part := round(10 ** digits_after_decimal * (positive_arg - floor(positive_arg)),0);
  positive_part := stringOfPositiveInteger(floor(positive_arg)) + (is_integral_enough ? "" : "." + padLeft(stringOfPositiveInteger(floating_part), "0", digits_after_decimal));

  return switch(typeof(arg)) {
    case "Number":
      switch {
        case isNaN(arg):
          "NaN";
        case isInfinite(arg) == -1:
          "-Inf";
        case isInfinite(arg) == 1:
          "Inf";
        case sign(arg) == 0:
          "0";
        case sign(arg) == 1:
            positive_part;
        case sign(arg) == -1:
          "-" + positive_part;
        default:
          "Encountered a number that is neither NaN, +Inf, -Inf, 0, positive or negative";
      };
    case "String":
      arg;
    case "Empty":
      "empty";
    case "Range":
      toRangeLiteral(arg);
  };
}

numRows(arg) {
  return size(arg)[0];
}

numCols(arg) {
  return size(arg)[1];
}

splitChars([1,n] stringchars, splitchar) {
  loc := matchRow(stringchars, splitchar);
  firstword := fromASCII(stringchars[:loc]);
  lastwords := splitChars(stringchars[loc+1:],splitchar);
  combined := stack(firstword, lastwords);
  return loc == empty ? fromASCII(stringchars) : combined;
}

split(string, splitter) {
  return splitChars(toASCII(string), toASCII(splitter));
}

splitToRange(string, row_splitter, col_splitter) {
  split_rows := split(string, row_splitter);
  [numRows(split_rows),1] split_cols := split(#split_rows,col_splitter);
  [numRows(split_rows),1] col_lengths := numRows(#split_cols);
  [numRows(split_rows), max(col_lengths)] result := #split_cols[column()];
  return result;
}

isSpace(char) {
  return switch(char) {
    case toASCII(" "), toASCII("\n"), toASCII("\t"), toASCII("\r"):
      1;
    default:
      0;
  };
}

trimChars(chars) {
  return isSpace(chars[0]) ? trimChars(chars[1:]) : chars;
}

ltrim(s) {
  return fromASCII(trimChars(toASCII(s)));
}

reverse(s) {
  chars := toASCII(s);
  l := len(s);
  [1,numCols(chars)] chars_reversed := chars[l-1-column()];
  return l ? fromASCII(chars_reversed) : "";
}

rtrim(s) {
  return reverse(ltrim(reverse(s)));
}

trim(s) {
  return ltrim(rtrim(s));
}

charAt(s, i) {
  return toASCII(s)[i];
}

parseString(s) {
  trimmed := trim(s);
  rangeSplit := splitToRange(substring(trimmed, 1, len(trimmed) - 2), ";", ",");
  [numRows(rangeSplit), numCols(rangeSplit)] rangeContents := parseString(#rangeSplit);
  return switch {
    case charAt(trimmed,0) == toASCII("{") && charAt(trimmed,-1) == toASCII("}"):
      rangeContents;
    case charAt(trimmed,0) == toASCII("\"") && charAt(trimmed,-1) == toASCII("\""):
      substring(trimmed, 1, len(trimmed) - 2);
    case trimmed == "empty":
      empty;
    default:
      parseFloat(trimmed);
  };
}

normalize([m,n] arg) {
	[m,n] squared_lengths := #arg * #arg, normalized := #arg / vector_norm;
	vector_norm := sqrt(sum(squared_lengths));
	return normalized;
}

append([m,n] rg1, [p,q] rg2) {
  [nmax(m,p), n+q] res;
  res[:m,:n] = #rg1;
  res[:p,n:n+q] = rg2[,[-n]];
  return res;
}

stack(rg1, rg2) {
  return transpose(append(transpose(rg1), transpose(rg2)));
}

avg([m,n] rng) {
  return sum(rng) / (m*n);
}

stdev([m,n] rng) {
  mean := avg(rng);
  [m,n] devs := #rng - mean;
  return sqrt(sumsq(devs)/(m*n-1));
}
