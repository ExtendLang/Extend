transpose([m,n] rng) {
  [n,m] ret := rng[column(),row()];
  return ret;
}

isNumber(x) {
  return typeof(x) == "Number";
}

isEmpty(x) {
  return typeof(x) == "Empty";
}

sum_column([m,1] rng) {
  /* Returns the sum of the values in the column, skipping any values that are non-numeric */
  [m,1] numbers := isNumber(#rng) ? #rng : 0;
  [m,1] running_sum;
  running_sum[0,0] = #numbers;
  running_sum[1:,0] = running_sum[[-1],] + #numbers;
  return running_sum[-1];
}

sum_row(rng) {
  /* Returns the sum of the values in the row, skipping any values that are non-numeric */
  return sum_column(transpose(rng));
}

sum([m,n] rng) {
  /* Returns the sum of the values in the range, skipping any values that are non-numeric */
  [1,n] column_sums := sum_column(rng[:,]);
  return sum_row(column_sums);
}

nmax(n1, n2) {
  return switch {
    case isNumber(n1) && isNumber(n2):
      n1 > n2 ? n1 : n2;
    case isNumber(n1):
      n1;
    case isNumber(n2):
      n2;
    default:
      empty;
  };
}

max_column([m,1] rng) {
  /* Returns the sum of the values in the range, skipping any values that are non-numeric */
  [m,1] running_max;
  running_max[0,0] = isNumber(#rng) ? #rng : empty;
  running_max[1:,0] = nmax(running_max[[-1]], #rng);
  return running_max[-1];
}

max_row(rng) {
  return max_column(transpose(rng));
}

max([m,n] rng) {
  [1,n] column_maxs := max_column(rng[:,]);
  return max_row(column_maxs);
}

colRange(start, end) {
  [end-start, 1] ret;
  ret[0,0] = start;
  ret[1:,0] = ret[[-1]] + 1;
  return ret;
}

match([num_rows, 1] list, val) {
  [num_rows, 1] amt_to_add, final_index;
  amt_to_add[0,0] = val == #list ? 0 : 1;
  amt_to_add[1:,0] = (amt_to_add[[-1]] == 0 || val == #list) ? 0 : 1;
  final_index[0,0] = 0;
  final_index[1:,0] = final_index[[-1]] + amt_to_add[[-1]];
  return amt_to_add[-1] == 0 ? final_index[-1] : empty;
}

concatRow([1,n] cells, joiner) {
  [1,n] accum;
  accum[0,0] = #cells;
  accum[0,1:] = accum[[-1]] + joiner + #cells;
  return accum[-1];
}

toRangeLiteral([m,n] rng) {
  [m,n] strings := toLiteral(#rng);
  [m,1] rows := concatRow(rng[,:], ", ");
  return "{" + concatRow(transpose(rows), ";\n") + "}";
}

toLiteral(arg) {
  return print_endline(arg) -> switch(typeof(arg)) {
    case "Number":
      to_string(arg);
    case "String":
      "\"" + arg + "\"";
    case "Empty":
      "empty";
    case "Range":
      toRangeLiteral(arg);
  };
}
