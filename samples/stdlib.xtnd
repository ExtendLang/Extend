extern "math.o" {
  [1,1] sin([1,1] theta);
}

extern "fileio.o" {
  open(filename, mode);
  close(handle);
  read(handle, max_bytes);
  readline(handle);
  write(handle, str);
}

transpose([m,n] rng) {
  [n,m] ret := rng[column(),row()];
  return ret;
}

isNumber(x) {
  return type(x) == "Number";
}

sum_column([m,1] rng) {
  /* Returns the sum of the values in the column, skipping any values that are non-numeric */
  [m,1] numbers := isNumber(#rng) ? #rng : 0;
  [m,1] running_sum;
  running_sum[0,0] = #numbers;
  running_sum[1:,0] = running_sum[[-1],] + #numbers;
  return running_sum[-1];
}

sum_row(rng) {
  /* Returns the sum of the values in the row, skipping any values that are non-numeric */
  return sum_column(transpose(rng));
}

sum([m,n] rng) {
  /* Returns the sum of the values in the range, skipping any values that are non-numeric */
  [1,n] column_sums := sum_column(rng[:,]);
  return sum_row(column_sums);
}

nmax(n1, n2) {
  return switch {
    case isNumber(n1) && isNumber(n2):
      n1 > n2 ? n1 : n2;
    case isNumber(n1):
      n1;
    case isNumber(n2):
      n2;
    default:
      empty;
  };
}

max_column([m,1] rng) {
  /* Returns the sum of the values in the range, skipping any values that are non-numeric */
  [m,1] running_max;
  running_max[0,0] = isNumber(#rng) ? #rng : empty;
  running_max[1:,0] = nmax(running_max[[-1]], #rng);
  return running_max[-1];
}

max_row(rng) {
  return max_column(transpose(rng));
}

max([m,n] rng) {
  [1,n] column_maxs := max_column(rng[:,]);
  return max_row(column_maxs);
}
