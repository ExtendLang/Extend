mergesort(col,[m,n]data) {
  breakpoint := floor(m/2);
  split1 := data[:breakpoint,:];
  split2 := data[breakpoint:,:];
  sizesplit1 := size(split1)[0];
  sizesplit2 := size(split2)[0];
  sortedsplit1 := sizesplit1 < 2 ? split1[row(),:] : mergesort(col,split1);
  sortedsplit2 := sizesplit2 < 2 ? split2[row(),:] : mergesort(col,split2);
  [m, 3] merged;
  merged[0,0] = #isbigger ? sortedsplit1[0,:] : sortedsplit2[0,:];
  merged[0,1] = #isbigger ? 1 : 0;
  merged[0,2] = #isbigger ? 0 : 1;
  [m, 1]isbigger;
  isbigger[0,0] = sortedsplit1[0,col] <= sortedsplit2[0,col];
  isbigger[1:,0] = sortedsplit1[merged[[-1], 1],col] == empty ? 0 : (sortedsplit2[merged[[-1],2],col] == empty ? 1 : (sortedsplit1[merged[[-1],1],col] <= sortedsplit2[merged[[-1],2],col]));
  merged[1:,0] =
    #isbigger
    ? sortedsplit1[merged[[-1],1],:]
    : sortedsplit2[merged[[-1],2],:];
  merged[1:,1] = #isbigger ? merged[[-1],1] + 1 : merged[[-1],1];
  merged[1:,2] = #isbigger ? merged[[-1],2] : merged[[-1],2] + 1;
  [m, n]transfer := merged[row(),0][column()];
  return transfer;
}

main(args) {
  [10000,2] mydata;
  mydata[:,0] = random();
  mydata[:,1] = row();
  mydata[:,2] = "Id: " + toString(row());
  return mergesort(0,mydata);
}
